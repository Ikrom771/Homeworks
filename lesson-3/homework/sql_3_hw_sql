--1.Define and explain the purpose of BULK INSERT in SQL Server.
--bulk insert is used to quickly load large volumes of data from a file (e.g., .txt, .csv) into a SQL Server table. It's faster than row-by-row inserts.

--2.List four file formats that can be imported into SQL Server.
--.csv, .txt, .xml, xls( or xlsx)
--3. Create Products table
create table Products (ProductID int primary key, ProductName varchar(50), Price decimal (10,2))

--4. Insert three records into the Products table using INSERT INTO.
insert into Products values (1, 'Bread', 10), (2, 'Shampoo', 25), (3, 'Phone', 500)

--5. Explain the difference between NULL and NOT NULL with examples.
-- Example of allowing NULL
CREATE TABLE Example1 ( ID INT, Description VARCHAR(100) NULL);

-- Example of NOT NULL
CREATE TABLE Example2 (ID INT, Description VARCHAR(100) NOT NULL);

--6.Add a UNIQUE constraint to the ProductName column in the Products table.
ALTER TABLE Products
ADD CONSTRAINT UQ_ProductName UNIQUE (ProductName);

--7.Write a comment in a SQL query explaining its purpose.
--The purpose is to ensure that no two products can have the same name.

--8.Create a table Categories with a CategoryID as PRIMARY KEY and a CategoryName as UNIQUE.
create table Categories (CategoryID int primary key,CategoryName varchar(50) unique)

--9.Explain the purpose of the IDENTITY column in SQL Server.
-- indentity column autogenerates new numbers when adding rows. Usually used as primary key

--10.Use BULK INSERT to import data from a text file into the Products table.
BULK INSERT Products
FROM 'C:\Users\User\Desktop\products.txt'
WITH (
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2


--11.Create a FOREIGN KEY in the Products table that references the Categories table.
ALTER TABLE Products
ADD CategoryID INT;

ALTER TABLE Products
ADD CONSTRAINT FK_Products_Categories
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID);

--12. Explain the differences between PRIMARY KEY and UNIQUE KEY with examples.
/* PRIMARY KEY :
Cannot contain NULL.
Only one per table.
Enforces uniqueness and NOT NULL.

UNIQUE KEY:
Can contain NULL (only one NULL per column).
Multiple UNIQUE keys can exist per table.
Enforces uniqueness only.
*/
--13.









